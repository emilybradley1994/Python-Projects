{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to the bank!\n",
      "Welcome to the bank!\n"
     ]
    }
   ],
   "source": [
    "from typing import Dict\n",
    "from random import randint\n",
    "\n",
    "\n",
    "def read_int(prompt_msg, error_msg):\n",
    "    while True:\n",
    "        try:\n",
    "            return int(input(prompt_msg))\n",
    "        except ValueError:\n",
    "            print(error_msg)\n",
    "\n",
    "\n",
    "class SavingsAccount:\n",
    "    def __init__(self, balance):\n",
    "        self.account_no = ''.join([\"{}\".format(randint(0, 9)) for num in range(0, 5)])\n",
    "        self.balance = balance\n",
    "\n",
    "    def print_account_no(self):\n",
    "        print(\"Your account number is {}.\".format(self.account_no))\n",
    "\n",
    "    def display_balance (self):\n",
    "        print(\"You currently have £{} in your account.\".format(self.balance))\n",
    "\n",
    "    def read_withdraw_amount(self):\n",
    "        while True:\n",
    "            withdraw = read_int(\"How much money would you like to withdraw?\", \"This value must be an integer.\")\n",
    "            if withdraw > self.balance:\n",
    "                print(\"Sorry, you do not have enough money in your account.\")\n",
    "            else:\n",
    "                return withdraw\n",
    "\n",
    "    def withdraw_money(self):\n",
    "        withdraw = self.read_withdraw_amount()\n",
    "        print(\"You have successfully withdrawn £{}.\".format(withdraw))\n",
    "        self.balance -= withdraw\n",
    "        self.display_balance()\n",
    "\n",
    "    def deposit_money (self):\n",
    "        deposit = read_int(\"How much money would you like to deposit?\", \"This value must be an integer.\")\n",
    "        print(\"You have successfully deposited £{}.\".format(deposit))\n",
    "        self.balance += deposit\n",
    "        self.display_balance()\n",
    "\n",
    "\n",
    "class Bank:\n",
    "    def __init__ (self):\n",
    "        self.savingsAccount: Dict[str, SavingsAccount] = {}\n",
    "\n",
    "    def create_account(self):\n",
    "        name = input(\"Please input your full name: \")\n",
    "        deposit = read_int(\"Please input the amount of your initial deposit: \", \"Please input a valid integer amount. \")\n",
    "        print(\"You have deposited £{}\".format(deposit))\n",
    "        account = SavingsAccount(deposit)\n",
    "        self.savingsAccount[name] = account\n",
    "        account.print_account_no()\n",
    "\n",
    "    def access_account(self):\n",
    "        while True:\n",
    "            name = input(\"Please input your full name: \")\n",
    "            if name in self.savingsAccount.keys():\n",
    "                account = self.savingsAccount[name]\n",
    "                while True:\n",
    "                    account_no = input(\"Please enter your account number: \")\n",
    "                    if account.account_no == account_no:\n",
    "                        break\n",
    "                    else:\n",
    "                        print(\"There is no such account number associated with this name.\")\n",
    "                break\n",
    "            else:\n",
    "                print(\"We cannot find this name in our system.\")\n",
    "        return account\n",
    "\n",
    "\n",
    "class BankMenu:\n",
    "    def __init__(self, bank: Bank):\n",
    "        self.bank = bank\n",
    "\n",
    "    def do_bank_menu(self):\n",
    "        while True:\n",
    "            choice = input(\"Enter 1 to create an account.\\n\"\n",
    "                           \"Enter 2 to access an existing account.\\n\"\n",
    "                           \"Enter 3 to exit.\\n\")\n",
    "            if choice not in [\"1\", \"2\", \"3\"]:\n",
    "                print (\"Please enter 1, 2 or 3..\")\n",
    "            else:\n",
    "                return choice\n",
    "\n",
    "    def do_account_menu(self):\n",
    "        while True:\n",
    "            choice = input(\"Enter 1 to display balance.\\n\"\n",
    "                           \"Enter 2 to withdraw money.\\n\"\n",
    "                           \"Enter 3 to deposit money.\\n\"\n",
    "                           \"Enter 4 to return to the main menu.\\n\")\n",
    "            if choice not in [\"1\", \"2\", \"3\", \"4\"]:\n",
    "                print (\"Please enter 1, 2, 3 or 4.\")\n",
    "            else:\n",
    "                break\n",
    "        return choice\n",
    "\n",
    "    def previous_page(self):\n",
    "        while True:\n",
    "            return input(\"Would you like to return to the previous page? Enter yes or no:\")[0].lower() == 'y'\n",
    "\n",
    "    def run(self):\n",
    "        print(\"Welcome to the bank!\")\n",
    "        while True:\n",
    "            user_choice = self.do_bank_menu()\n",
    "            if user_choice == \"1\":\n",
    "                self.bank.create_account()\n",
    "                if not self.previous_page():\n",
    "                    break\n",
    "            elif user_choice == \"2\":\n",
    "                account = self.bank.access_account()\n",
    "                while True:\n",
    "                    user_choice = self.do_account_menu()\n",
    "                    if user_choice == \"1\":\n",
    "                        account.display_balance()\n",
    "                    elif user_choice == \"2\":\n",
    "                        account.withdraw_money()\n",
    "                    elif user_choice == \"3\":\n",
    "                        account.deposit_money()\n",
    "                    elif user_choice == \"4\":\n",
    "                        break\n",
    "                    else:\n",
    "                        continue\n",
    "\n",
    "                    if not self.previous_page():\n",
    "                        break\n",
    "            else:\n",
    "                break\n",
    "\n",
    "\n",
    "def main():\n",
    "    print(\"Welcome to the bank!\")\n",
    "    bank = Bank()\n",
    "    bank_menu = BankMenu(bank)\n",
    "    bank_menu.run()\n",
    "    print(\"Thankyou for using the bank!\")\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
